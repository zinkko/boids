{"version":3,"sources":["entities/geometry.ts","entities/Boid.ts","entities/World.ts","utils/random.ts","BoidSimulation.tsx","controls/InputField.tsx","controls/Slider.tsx","controls/DrawingOptions.tsx","controls/Controls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DirectionVector","x","y","this","Math","hypot","a","cos","sin","acos","pointOnCircle","origin","radius","direction","mod","m","distance2","p1","p2","dx","dy","centerOfMass","points","map","p","reduce","add","length","averageOfDirections","ds","b","Boid","world","properties","size","speed","turnSpeed","pos","visionRadius","color","crowdingDistance","boidsWithinVision","targets","addTarget","tgtF","weight","tgt","i","push","separate","bind","align","cohere","steerToward","nearestWall","wall","walls","PI","opposite","otherBoids","others","filter","closest","d2","width","forEach","nd","boids","com","ownAngle","angle","otherAngle","refAngle","clockwise","sign","turn","ctx","nose","tail1","tail2","back","beginPath","fillStyle","moveTo","lineTo","fill","World","height","simulateWorld","deltaT","boid","ai","simulatePortalWalls","hilightGroup","arc","hilightVision","main","inVision","strokeStyle","stroke","other","hilightNearestWall","begin","end","draw","config","clearRect","fillRect","showGroup","showVision","showCenterOfMass","hilightBoidCenterOfMass","d","slice","min","max","north","south","east","west","randomBetween","random","abs","randomColor","hue","mode","saturation","lightness","minSaturation","maxSaturation","minLightness","maxLightness","randomDirection","randomPosition","maxX","minX","maxY","minY","BoidSimulation","canvasRef","useRef","useState","n","amountOfBoids","addBoid","boidProperties","createWorld","changeBoidSize","removeBoid","useEffect","animationFrame","current","getContext","lastTick","performance","now","renderLoop","timestamp","requestAnimationFrame","play","cancelAnimationFrame","className","ref","id","InputField","label","children","InputArea","Label","styled","div","Slider","unit","value","setValue","SliderContainer","onClick","DrawingOptions","values","setValues","vision","group","type","checked","Controls","update","key","Title","newvalue","h2","Header","Panel","defaultConfig","App","setConfig","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","document","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d600c88e.chunk.js","sourcesContent":["\r\nexport interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport class DirectionVector {\r\n    public x: number;\r\n    public y: number;\r\n    constructor(x: number, y: number) {\r\n        this.x = x / Math.hypot(x, y);\r\n        this.y = y / Math.hypot(x, y);\r\n    }\r\n    public turn(a: number): DirectionVector {\r\n        return new DirectionVector(\r\n            this.x * Math.cos(a) - this.y * Math.sin(a),\r\n            this.x * Math.sin(a) + this.y * Math.cos(a)\r\n        );\r\n    }\r\n    public opposite(): DirectionVector {\r\n        return new DirectionVector(-this.x, -this.y);\r\n    }\r\n    public angle(): number {\r\n        if (this.y < 0) {\r\n            return -Math.acos(this.x);\r\n        }\r\n        return Math.acos(this.x);\r\n    }\r\n}\r\n\r\nexport const angleBetween = (a: DirectionVector, b: DirectionVector) => {\r\n    return Math.acos(a.x*b.x + a.y*b.y);\r\n}\r\n\r\nexport const directionFromAngle = (a: number): DirectionVector => {\r\n    return new DirectionVector(Math.cos(a), Math.sin(a));\r\n};\r\n\r\nexport const pointOnCircle = (\r\n    origin: Point,\r\n    radius: number,\r\n    direction: DirectionVector\r\n): Point => ({\r\n    x: origin.x + radius * direction.x,\r\n    y: origin.y + radius * direction.y,\r\n});\r\n\r\nexport const dAngle = (a1: number, a2: number) => {\r\n    const delta = mod(a1 - a2, Math.PI*2);\r\n    return Math.min(delta, Math.PI*2 - delta);\r\n}\r\n\r\nexport const mod = (a: number, m: number) => {\r\n    return ((a % m) + m) % m;\r\n}\r\n\r\nconst distance = (p1: Point, p2: Point) => {\r\n    const dx = Math.abs(p1.x - p2.x);\r\n    const dy = Math.abs(p1.y - p2.y);\r\n    return Math.hypot(dx, dy);\r\n}\r\n\r\nexport const distance2 = (p1: Point, p2: Point) => {\r\n    const dx = p1.x - p2.x;\r\n    const dy = p1.y - p2.y;\r\n    return dx*dx + dy*dy;\r\n}\r\n\r\nexport const centerOfMass = (points: Point[]): Point => ({\r\n    x: points.map(p => p.x).reduce(add) / points.length,\r\n    y: points.map(p => p.y).reduce(add) / points.length,\r\n});\r\n\r\nexport const averageOfDirections = (ds: DirectionVector[]): DirectionVector => {\r\n    const { x, y } = centerOfMass(ds);\r\n    if (x === 0 && y === 0) {\r\n        return new DirectionVector(1, 0);\r\n    }\r\n    return new DirectionVector(x, y);\r\n};\r\n\r\nconst add = (a: number, b: number) => a + b;\r\n","\r\nimport { Point, pointOnCircle, DirectionVector, angleBetween, mod, centerOfMass, averageOfDirections, distance2 } from './geometry';\r\nimport World, { walls } from './World';\r\n\r\nexport interface BoidProperties {\r\n    size?: number;\r\n    speed?: number;\r\n    turnSpeed?: number;\r\n    direction?: DirectionVector;\r\n    pos?: Point;\r\n    world?: World;\r\n    visionRadius?: number;\r\n    color?: string;\r\n    crowdingDistance?: number;\r\n}\r\n\r\nexport default class Boid {\r\n    public size: number;\r\n    public speed: number;\r\n    public turnSpeed: number;\r\n    public direction: DirectionVector;\r\n    public pos: Point;\r\n    private world: World;\r\n    public visionRadius: number;\r\n    private color: string;\r\n    private crowdingDistance: number;\r\n\r\n    constructor(world: World, properties?: BoidProperties) {\r\n        this.size = properties?.size || 5;\r\n        this.speed = properties?.speed || 0.1;\r\n        this.turnSpeed = properties?.turnSpeed || 0.05;\r\n        this.direction = properties?.direction || new DirectionVector(1, 0);\r\n        this.pos = properties?.pos || { x: 100, y: 100 };\r\n        this.world = world;\r\n        this.visionRadius = properties?.visionRadius || this.size * 20;\r\n        this.crowdingDistance = properties?.crowdingDistance || this.size * 5;\r\n        this.color = properties?.color || 'black';\r\n    }\r\n    public ai() {\r\n        const boidsWithinVision = this.world.boidsWithinVision(this);\r\n        const targets: DirectionVector[] = [];\r\n        const addTarget = (tgtF: (boids: Boid[]) => DirectionVector | null, weight: number) => {\r\n            const tgt = tgtF(boidsWithinVision);\r\n            if (tgt) {\r\n                for (let i=0; i<weight; i++) targets.push(tgt);\r\n            }\r\n        }\r\n        if (boidsWithinVision.length > 0) {\r\n            // boid actions\r\n            addTarget(this.separate.bind(this), 2);\r\n            addTarget(this.align.bind(this), 1);\r\n            addTarget(this.cohere.bind(this), 1);\r\n        }\r\n\r\n        // addTarget(this.avoidWall.bind(this), 2);\r\n\r\n        if (targets.length > 0) {\r\n            this.steerToward(averageOfDirections(targets));\r\n        }\r\n    }\r\n\r\n    private avoidWall() {\r\n        const [wall, d] = this.world.nearestWall(this);\r\n        if (d <= this.visionRadius) {\r\n            if (angleBetween(walls[wall], this.direction) < Math.PI / 2) {\r\n                return walls[wall].opposite();\r\n            }\r\n        }\r\n        return this.direction;\r\n    }\r\n\r\n    private separate(otherBoids: Boid[]): DirectionVector | null {\r\n        const others = otherBoids.filter(b => {\r\n            return distance2(b.pos, this.pos) < this.crowdingDistance*this.crowdingDistance;\r\n        });\r\n        if (others.length === 0) {\r\n            return null;\r\n        }\r\n        let closest = others[0];\r\n        let d2 = this.world.width * 10;\r\n        others.forEach(b => {\r\n            const nd = distance2(this.pos, b.pos)\r\n            if (nd < d2) {\r\n                d2 = nd;\r\n                closest = b;\r\n            }\r\n        });\r\n        return new DirectionVector(\r\n            this.pos.x - closest.pos.x,\r\n            this.pos.y - closest.pos.y\r\n        );\r\n    }\r\n\r\n    private align(otherBoids: Boid[]): DirectionVector {\r\n        const boids = [this, ...otherBoids]\r\n        return averageOfDirections(boids.map(b => b.direction));\r\n    }\r\n\r\n    private cohere(otherBoids: Boid[]): DirectionVector {\r\n        const boids = [this, ...otherBoids];\r\n        const com = centerOfMass(boids.map(b => b.pos));\r\n\r\n        return new DirectionVector(com.x - this.pos.x, com.y - this.pos.y);\r\n    }\r\n    \r\n    private steerToward(direction: DirectionVector) {\r\n        const ownAngle = this.direction.angle();\r\n        const otherAngle = direction.angle();\r\n        const refAngle = mod(ownAngle - otherAngle, Math.PI*2);\r\n        const clockwise = -Math.sign(Math.PI - refAngle);\r\n        this.direction = this.direction.turn(clockwise * this.turnSpeed);\r\n    }\r\n    \r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n        const a = 0.8 * Math.PI;\r\n        const nose = pointOnCircle(this.pos, this.size, this.direction);\r\n        const tail1 = pointOnCircle(this.pos, this.size, this.direction.turn(a));\r\n        const tail2 = pointOnCircle(this.pos, this.size, this.direction.turn(-a));\r\n        const back = pointOnCircle(this.pos, 0.5*this.size, this.direction.opposite());\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.moveTo(nose.x, nose.y);\r\n        ctx.lineTo(tail1.x, tail1.y);\r\n        ctx.lineTo(back.x, back.y);\r\n        ctx.lineTo(tail2.x, tail2.y);\r\n        ctx.lineTo(nose.x, nose.y);\r\n        ctx.fill();\r\n\r\n    };\r\n};\r\n","import { distance2, DirectionVector, mod, centerOfMass } from './geometry';\r\nimport Boid, { BoidProperties } from './Boid';\r\nimport { SimulationConfig } from '../BoidSimulation';\r\n\r\nexport default class World {\r\n    public width: number;\r\n    public height: number;\r\n    private boids: Boid[];\r\n\r\n    constructor(width?: number, height?: number) {\r\n        this.width = width || 500;\r\n        this.height = height || 400;\r\n        this.boids = [];\r\n    }\r\n\r\n    public addBoid(properties: BoidProperties) {\r\n        this.boids.push(new Boid(this, properties));\r\n    }\r\n\r\n    public removeBoid() {\r\n        this.boids = this.boids.slice(0, this.boids.length-1);\r\n    }\r\n\r\n    public amountOfBoids(): number {\r\n        return this.boids.length;\r\n    }\r\n\r\n    public boidsWithinVision(boid: Boid) {\r\n        return this.boids.filter(b => {\r\n            if (b === boid) {\r\n                return false;\r\n            }\r\n            return distance2(boid.pos, b.pos) <= boid.visionRadius*boid.visionRadius;\r\n        });\r\n    }\r\n\r\n    public simulateWorld = (deltaT: number) => {\r\n        this.boids.forEach(boid => {\r\n            boid.ai();\r\n\r\n            boid.pos.x += deltaT * boid.speed * boid.direction.x;\r\n            boid.pos.y += deltaT * boid.speed * boid.direction.y;\r\n\r\n            this.simulatePortalWalls(boid);\r\n        });\r\n    };\r\n    \r\n    private simulatePortalWalls(boid: Boid) {\r\n        boid.pos.x = mod(boid.pos.x, this.width);\r\n        boid.pos.y = mod(boid.pos.y, this.height);\r\n    }\r\n    \r\n    private simulateSolidWalls(boid: Boid) {\r\n        boid.pos.x = Math.min(Math.max(boid.pos.x, 0), this.width); \r\n        boid.pos.y = Math.min(Math.max(boid.pos.y, 0), this.height);\r\n    }\r\n\r\n    public hilightGroup = (ctx: CanvasRenderingContext2D, boid: Boid) => {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = 'aliceblue';\r\n        ctx.moveTo(boid.pos.x+boid.visionRadius/2, boid.pos.y);\r\n        ctx.arc(boid.pos.x, boid.pos.y, boid.visionRadius/2, 0, Math.PI*2);\r\n        ctx.fill();\r\n    }\r\n\r\n    public hilightVision = (ctx: CanvasRenderingContext2D) => {\r\n        if (this.boids.length < 1) {\r\n            return;\r\n        }\r\n        const main = this.boids[0];\r\n        const inVision = this.boidsWithinVision(main);\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'gold';\r\n        ctx.arc(main.pos.x, main.pos.y, main.visionRadius, 0, Math.PI * 2);\r\n        ctx.moveTo(main.pos.x + 5, main.pos.y);\r\n        ctx.arc(main.pos.x, main.pos.y, 5, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'green';\r\n        inVision.forEach(other => {\r\n            ctx.moveTo(other.pos.x + 5, other.pos.y);\r\n            ctx.arc(other.pos.x, other.pos.y, 5, 0, Math.PI * 2);\r\n        })\r\n        ctx.stroke();\r\n    }\r\n\r\n    public hilightNearestWall = (ctx: CanvasRenderingContext2D) => {\r\n        if (this.boids.length < 1) {\r\n            return;\r\n        }\r\n        const wall = this.nearestWall(this.boids[0])[0];\r\n        const begin = (wall === 'north' || wall === 'west')\r\n        ? { x: 0, y: 0 }\r\n        : { x: this.width, y: this.height };\r\n        const end = (wall === 'west' || wall === 'east')\r\n            ? { x: begin.x, y: this.height - begin.y } // vertical\r\n            : { x: this.width - begin.x, y: begin.y };\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'red';\r\n        ctx.moveTo(begin.x, begin.y);\r\n        ctx.lineTo(end.x, end.y);\r\n        ctx.stroke();\r\n        ctx.strokeStyle = 'black';\r\n    }\r\n\r\n    private hilightBoidCenterOfMass(ctx: CanvasRenderingContext2D) {\r\n        const com = centerOfMass(this.boids.map(b => b.pos));\r\n        ctx.beginPath();\r\n        ctx.arc(com.x, com.y, 5, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n    }\r\n\r\n    private hilightAngles(ctx: CanvasRenderingContext2D) {\r\n        ctx.beginPath();\r\n        const r = 20; \r\n        this.boids.forEach(({ pos:{ x, y }, direction }) => {\r\n            ctx.moveTo(x + r, y);\r\n            ctx.arc(x, y, r, 0, direction.angle());\r\n        });\r\n\r\n        ctx.stroke();\r\n    }\r\n\r\n    public draw = (ctx: CanvasRenderingContext2D, config: DrawingConfig) => {\r\n        ctx.clearRect(0, 0, this.width, this.height);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, this.width, this.height);\r\n        ctx.fillStyle = 'black';\r\n\r\n        if (config.showGroup) {\r\n            this.boids.forEach(boid => {\r\n                this.hilightGroup(ctx, boid);\r\n            });\r\n        }\r\n        this.boids.forEach(boid => {\r\n            boid.draw(ctx);\r\n        });\r\n        \r\n        if (config.showVision) {\r\n            this.hilightVision(ctx);\r\n        }\r\n        if (config.showCenterOfMass) {\r\n            this.hilightBoidCenterOfMass(ctx);\r\n        }\r\n    };\r\n\r\n    public nearestWall = (boid: Boid): [Wall, number] => {\r\n        const { x, y } = boid.pos;\r\n        let d = y;\r\n        let wall: Wall = 'north';\r\n        if (x < d) {\r\n            d = x; wall = 'west';\r\n        }\r\n        if (this.width - x < d) {\r\n            d = this.width - x; wall = 'east';\r\n        }\r\n        if (this.height - y < d) {\r\n            d = this.height - y; wall = 'south';\r\n        }\r\n    \r\n        return [wall, d];\r\n    };\r\n\r\n    public changeBoidSize(size: number) {\r\n        if (size < 1 || 0.5*this.height < size) {\r\n            return;\r\n        }\r\n        this.boids.forEach(b => {\r\n            b.size = size;\r\n        });\r\n    }\r\n};\r\n\r\nexport interface DrawingConfig {\r\n    showGroup?: boolean;\r\n    showCenterOfMass?: boolean;\r\n    showVision?: boolean;\r\n}\r\n\r\n// walls\r\n\r\nexport const walls = {\r\n    north: new DirectionVector(0, -1),\r\n    south: new DirectionVector(0, 1),\r\n    east: new DirectionVector(1, 0),\r\n    west: new DirectionVector(-1, 0),\r\n};\r\n\r\nexport type Wall = keyof typeof walls;\r\n","import { DirectionVector, directionFromAngle, Point } from \"../entities/geometry\";\r\n\r\nexport const randomBetween = (a: number, b: number):number => {\r\n    return Math.random() * Math.abs(a-b) + Math.min(a, b);\r\n}\r\n\r\nexport interface randomColorConfig {\r\n    minLightness?: number;\r\n    maxLightness?: number;\r\n    minSaturation?: number;\r\n    maxSaturation?: number;\r\n}\r\n\r\nexport const randomColor = (\r\n    hue: number,\r\n    mode: 'saturation' | 'lightness' | 'both',\r\n    config?: randomColorConfig\r\n): string => {\r\n    let saturation = 90, lightness = 50;\r\n    if (mode === 'saturation' || mode === 'both') {\r\n        saturation = randomBetween(config?.minSaturation || 0, config?.maxSaturation || 100);\r\n    }\r\n    if (mode === 'lightness' || mode === 'both') {\r\n        lightness = randomBetween(config?.minLightness || 0, config?.maxLightness || 100);\r\n    }\r\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n}\r\n\r\nexport const randomDirection = (): DirectionVector => directionFromAngle(Math.random() * Math.PI * 2);\r\n\r\nexport interface RandomPositionConfig {\r\n    maxX: number;\r\n    minX: number;\r\n    maxY: number;\r\n    minY: number;\r\n}\r\n\r\nexport const randomPosition = (config: RandomPositionConfig): Point => {\r\n    return {\r\n        x: randomBetween(config.maxX, config.minX),\r\n        y: randomBetween(config.maxY, config.minY),\r\n    };\r\n}","import { useEffect, useRef, useState } from 'react';\r\nimport { BoidProperties } from './entities/Boid';\r\nimport World, { DrawingConfig } from './entities/World';\r\nimport { randomColor, randomDirection, randomPosition } from './utils/random';\r\n\r\nexport interface SimulationConfig extends DrawingConfig {\r\n    boidProperties: BoidProperties;\r\n    amountOfBoids: number;\r\n}\r\n\r\nconst createWorld = (config: SimulationConfig): World => {\r\n    const world = new World(800, 400);\r\n    const n = config.amountOfBoids;\r\n    const pad = 20;\r\n    for (let i=0; i < n; i++) {\r\n        world.addBoid({\r\n            ...(config.boidProperties|| {}),\r\n            pos: randomPosition({ maxX: world.width - pad, minX: pad, maxY: world.height - pad, minY: pad }),\r\n            color: randomColor(240, 'lightness', { minLightness: 20, maxLightness: 70 }),\r\n            direction: randomDirection(),\r\n        });\r\n    }\r\n    return world;\r\n}\r\n\r\nexport default function BoidSimulation({ config }: { config: SimulationConfig }) {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [world, _] = useState(createWorld(config));\r\n\r\n    world.changeBoidSize(config.boidProperties?.size || 5);\r\n    // hack\r\n    while (world.amountOfBoids() > config.amountOfBoids && config.amountOfBoids >= 0) {\r\n        world.removeBoid();\r\n    }\r\n    while (world.amountOfBoids() < config.amountOfBoids) {\r\n        world.addBoid(config.boidProperties || {});\r\n    }\r\n\r\n    useEffect(() => {\r\n        let animationFrame: number | null = null;\r\n        const play = (ctx: CanvasRenderingContext2D) => {\r\n            let lastTick = performance.now();\r\n            const renderLoop = (timestamp: number) => {\r\n                const deltaT = timestamp - lastTick;\r\n                lastTick = timestamp;\r\n                world.simulateWorld(deltaT);\r\n                world.draw(ctx, config);\r\n                animationFrame = requestAnimationFrame(renderLoop);\r\n            };\r\n            renderLoop(lastTick);\r\n        }\r\n        const ctx = canvasRef?.current?.getContext('2d');\r\n        if (ctx) {\r\n            play(ctx);\r\n        }\r\n        return () => {\r\n            if (animationFrame) {\r\n                cancelAnimationFrame(animationFrame);\r\n            }\r\n        };\r\n    }, [canvasRef, world, config]);\r\n\r\n\r\n    return (\r\n        <div className=\"Simulation\">\r\n            <canvas\r\n                ref={canvasRef}\r\n                id=\"world\"\r\n                width={world.width}\r\n                height={world.height}\r\n            />\r\n        </div>\r\n    );\r\n};","import { ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default function InputField({ label, children }: { label: string; children: ReactNode }) {\r\n    return (\r\n        <InputArea>\r\n            <Label>{label}</Label>\r\n            {children}\r\n        </InputArea>\r\n    );\r\n}\r\n\r\nconst InputArea = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: left;\r\n\r\n    padding: 16px;\r\n\r\n`;\r\n\r\nconst Label = styled.label`\r\n    color: #343434;\r\n    padding-bottom: 4px;\r\n    margin-bottom: 32px;\r\n    border-bottom: solid 1px blue;\r\n`;","import styled from 'styled-components';\r\n\r\nexport interface SliderProps {\r\n    unit?: string;\r\n    value: number;\r\n    setValue: (newvalue: number) => void;\r\n}\r\n\r\nexport default function Slider({ unit, value, setValue}: SliderProps) {\r\n    return (\r\n        <SliderContainer>\r\n            <button onClick={() => setValue(value-1)}>-</button>\r\n            {value}{unit && ` ${unit}`}\r\n            <button onClick={() => setValue(value+1)}>+</button>\r\n        </SliderContainer>\r\n    );\r\n}\r\n\r\nconst SliderContainer = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-around;\r\n`;","import { ControlProps } from \"./Controls\";\r\n\r\n\r\nexport default function DrawingOptions({ values, setValues }: ControlProps) {\r\n    const com = values.showCenterOfMass;\r\n    const vision = values.showVision;\r\n    const group = values.showGroup;\r\n    return (\r\n        <div className=\"DrawingOptions\">\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={com}\r\n                    onClick={() => setValues({ ...values, showCenterOfMass: !com })}\r\n                />\r\n                &nbsp;show center of mass\r\n            </div>\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={vision}\r\n                    onClick={() => setValues({ ...values, showVision: !vision })}\r\n                    />\r\n                &nbsp;show vision of boids\r\n            </div>\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={group}\r\n                    onClick={() => setValues({ ...values, showGroup: !group })}\r\n                    />\r\n                &nbsp;show groups\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { SimulationConfig } from \"../BoidSimulation\";\r\nimport { BoidProperties } from \"../entities/Boid\";\r\nimport InputField from \"./InputField\";\r\nimport Slider from \"./Slider\";\r\nimport DrawingOptions from './DrawingOptions'\r\nimport styled from 'styled-components';\r\n\r\nexport interface ControlProps {\r\n    values: SimulationConfig;\r\n    setValues: (newvalue: SimulationConfig) => void;\r\n}\r\n\r\nexport default function Controls({ values, setValues }: ControlProps) {\r\n    const update = (key: keyof SimulationConfig | keyof BoidProperties, value: any) => {\r\n        if (key in values) {\r\n            setValues({...values, [key]: value});\r\n        } else {\r\n            const boidProperties = { ...values.boidProperties, [key]: value };\r\n            setValues({...values, boidProperties });\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"Controls\">\r\n            <Title>Settings</Title>\r\n            <InputField label=\"Amount of Boids\">\r\n                <Slider\r\n                    value={values.amountOfBoids}\r\n                    setValue={newvalue => update('amountOfBoids', newvalue)}\r\n                />\r\n            </InputField>\r\n            <InputField label=\"Boid Size\">\r\n                <Slider\r\n                    unit=\"px\"\r\n                    value={values.boidProperties?.size || 5}\r\n                    setValue={newvalue => update('size', newvalue)}\r\n                />\r\n            </InputField>\r\n\r\n            <InputField label=\"Drawing Options\">\r\n                <DrawingOptions\r\n                    values={values}\r\n                    setValues={setValues}\r\n                />\r\n            </InputField>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Title = styled.h2`\r\n    color: #343434;\r\n`\r\n\r\n","import React, { ReactNode, useState } from 'react';\nimport BoidSimulation, { SimulationConfig } from './BoidSimulation';\nimport Controls from './controls/Controls';\nimport './App.css';\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <h1>Boid Simulation</h1>\n    </div>\n  )\n}\n\ninterface PanelProps {\n  children: ReactNode;\n}\n\nfunction Panel({ children }: PanelProps) {\n  return (\n    <div className=\"Panel\">\n      {children}\n    </div>\n  );\n}\n\nconst defaultConfig = {\n  amountOfBoids: 80,\n  boidProperties: { size: 5 },\n}\n\nfunction App() {\n  const [config, setConfig] = useState<SimulationConfig>(defaultConfig);\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Panel>\n        <BoidSimulation config={config} />\n        <Controls values={config} setValues={setConfig} />\n      </Panel>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\ndocument.title = 'Boids'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}